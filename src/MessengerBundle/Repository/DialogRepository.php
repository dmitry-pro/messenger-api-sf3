<?php

namespace MessengerBundle\Repository;

use MessengerBundle\Entity\Dialog;
use MessengerBundle\Entity\Message;
use UserBundle\Entity\User;

/**
 * DialogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DialogRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User[] $users
     *
     * @return array|Dialog
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \LogicException
     */
    public function createOrGetDialogWithUsers($users)
    {
        // if this is dialog with the same user
        if (2 === count($users) && $users[0] == $users[1]) {
            throw new \LogicException('Dialog with the same user cannot be created in this schema version due to composite PK in many-to-many table.');
        }

        $qb = $this->createQueryBuilder('d');
        foreach ($users as $key => $user) {
            $qb = $qb
                ->andWhere(':user_id_' . $key . ' MEMBER OF d.users ')
                ->setParameter(':user_id_' . $key, $user->getId())
            ;
        }

        $result = $qb->getQuery()->getResult();

        if ($result) {
            $result = $result[0];
        } else {
            $result = new Dialog();
            if ($users && count($users)) {
                foreach ($users as $user) {
                    $result->addUser($user);
                }
                $this->getEntityManager()->persist($result);
                $this->getEntityManager()->flush($result);
            }

        }

        return $result;
    }

    /**
     * @param Dialog  $dialog
     * @param Message $message
     *
     * @return Message
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function writeToDialog(Dialog $dialog, Message $message)
    {
        $dialog->addMessage($message);
        $this->getEntityManager()->persist($message);
        $this->getEntityManager()->flush($message);

        return $message;
    }

    /**
     * @param Dialog $dialog
     *
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getDialogMessages(Dialog $dialog)
    {
        return $dialog->getMessages();
    }

    /**
     * @return Dialog[]
     */
    public function getAllDialogs()
    {
        return $this->findAll();
    }

    /**
     * @return void
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeAllDialogs()
    {
        $dialogs = $this->getAllDialogs();
        foreach ($dialogs as $dialog) {
            $this->getEntityManager()->remove($dialog);
        }

        $this->getEntityManager()->flush();
    }

    /**
     * @param Dialog $dialog
     *
     * @return void
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeDialog(Dialog $dialog)
    {
        $this->getEntityManager()->remove($dialog);
        $this->getEntityManager()->flush($dialog);
    }

    /**
     * @param int $dialogId
     *
     * @return bool
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeDialogById($dialogId)
    {
        $dialog = $this->find($dialogId);
        if ($dialog) {
            $this->getEntityManager()->remove($dialog);
            $this->getEntityManager()->flush($dialog);

            return true;
        }

        return false;
    }
}
