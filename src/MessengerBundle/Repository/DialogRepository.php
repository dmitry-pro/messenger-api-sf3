<?php

namespace MessengerBundle\Repository;
use MessengerBundle\Entity\Dialog;
use MessengerBundle\Entity\Message;
use UserBundle\Entity\User;

/**
 * DialogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DialogRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param User[] $users
     *
     * @return array|Dialog
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function createOrGetDialogWithUsers($users)
    {
        $qb = $this
            ->createQueryBuilder('d')
            ->join('d.users', 'u');

        foreach ($users as $user) {
            $qb = $qb
                ->andWhere(':user in u')
                ->setParameter('user', $user)
            ;
        }

        $result = $qb->getQuery()->getResult();
        if ($result) {
            $result = $result[0];
        } else {
            $result = new Dialog($users);
            $this->getEntityManager()->persist($result);
            $this->getEntityManager()->flush($result);
        }

        return $result;
    }

    /**
     * @param Dialog  $dialog
     * @param Message $message
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function writeToDialog(Dialog $dialog, Message $message)
    {
        $dialog->addMessage($message);
        $this->getEntityManager()->persist($message);
        $this->getEntityManager()->flush($message);
    }

    /**
     * @param Dialog $dialog
     *
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getDialogMessages(Dialog $dialog)
    {
        return $dialog->getMessages();
    }

    /**
     * @return Dialog[]
     */
    public function getAllDialogs()
    {
        return $this->findAll();
    }

    /**
     * @return void
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeAllDialogs()
    {
        $dialogs = $this->getAllDialogs();
        foreach ($dialogs as $dialog) {
            $this->getEntityManager()->remove($dialog);
        }

        $this->getEntityManager()->flush();
    }

    /**
     * @param Dialog $dialog
     *
     * @return void
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeDialog(Dialog $dialog)
    {
        $this->getEntityManager()->remove($dialog);
        $this->getEntityManager()->flush($dialog);
    }
}
